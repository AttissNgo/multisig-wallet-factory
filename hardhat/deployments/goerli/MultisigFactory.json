{
  "address": "0xC67795822915e47CC7B9678007AAcb2a9Cb57A38",
  "abi": [
    {
      "inputs": [],
      "name": "MultisigFactory__AlreadyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultisigFactory__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultisigFactory__NotWallet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "walletIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "createdBy",
          "type": "address"
        }
      ],
      "name": "WalletCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "addOwnerToWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_walletIndex",
          "type": "uint256"
        }
      ],
      "name": "computedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_signaturesRequired",
          "type": "uint256"
        }
      ],
      "name": "createNewWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_walletIndex",
          "type": "uint256"
        }
      ],
      "name": "getWalletByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "signaturesRequired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "walletBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWallets",
      "outputs": [
        {
          "internalType": "contract MultisigWallet[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "isUserOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfWallets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeOwnerFromWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersWallets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9df0474014a6762b44ee299a60b39a7dfbcd2c15b327928eccc04f2df7e4c53",
  "receipt": {
    "to": null,
    "from": "0x537Df8463a09D0370DeE4dE077178300340b0030",
    "contractAddress": "0xC67795822915e47CC7B9678007AAcb2a9Cb57A38",
    "transactionIndex": 25,
    "gasUsed": "4205551",
    "logsBloom": "0x
    "blockHash": "0x7e15ab57ec06630f457c03ceadc638b99a9c4212d2df02ed479eea2ba94618b4",
    "transactionHash": "0xe9df0474014a6762b44ee299a60b39a7dfbcd2c15b327928eccc04f2df7e4c53",
    "logs": [],
    "blockNumber": 7680390,
    "cumulativeGasUsed": "15157991",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8dec7c41ce39b62d1786917a1f4fa8e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MultisigFactory__AlreadyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultisigFactory__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultisigFactory__NotWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"walletIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addOwnerToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletIndex\",\"type\":\"uint256\"}],\"name\":\"computedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"name\":\"createNewWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletIndex\",\"type\":\"uint256\"}],\"name\":\"getWalletByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signaturesRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"contract MultisigWallet[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isUserOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeOwnerFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultisigFactory.sol\":\"MultisigFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x62237e1773cbf99739b7019f3772a2ff5360d56edb69751b513237f5fcd78571\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/MultisigFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./MultisigWallet.sol\\\";\\n\\nerror MultisigFactory__NotWallet();\\nerror MultisigFactory__AlreadyOwner();\\nerror MultisigFactory__NotOwner();\\n\\ncontract MultisigFactory {\\n    MultisigWallet[] private wallets;\\n    mapping(address => bool) public walletExists;\\n    mapping(address => mapping(address => bool)) public usersWallets;\\n\\n    event WalletCreated(\\n        uint256 indexed walletIndex, \\n        string name,\\n        address indexed contractAddress,\\n        address[] owners,\\n        uint256 signaturesRequired,\\n        address createdBy\\n    );\\n\\n    modifier onlyWallet() {\\n        if(!walletExists[msg.sender]) revert MultisigFactory__NotWallet();\\n        _;\\n    }\\n\\n    //create2\\n    function createNewWallet(\\n        string calldata _name,\\n        address[] calldata _owners,\\n        uint256 _signaturesRequired\\n    )\\n        public\\n        payable\\n    {\\n        uint256 walletIndex = numberOfWallets();\\n        bytes32 _salt = keccak256(\\n            abi.encodePacked(abi.encode(_name, walletIndex, address(msg.sender)))\\n        );\\n\\n        address walletAddress = payable(\\n            Create2.deploy(\\n                msg.value, \\n                _salt, \\n                abi.encodePacked(\\n                    type(MultisigWallet).creationCode,\\n                    abi.encode(_name, _owners, _signaturesRequired, address(this))\\n                )\\n            )\\n        );\\n\\n        MultisigWallet wallet = MultisigWallet(payable(walletAddress));\\n        wallets.push(wallet);\\n        walletExists[address(walletAddress)] = true;\\n        for(uint256 i; i < _owners.length; i++){\\n            usersWallets[_owners[i]][walletAddress] = true;\\n        }\\n        emit WalletCreated(\\n            walletIndex, \\n            _name, \\n            address(wallet), \\n            _owners, \\n            _signaturesRequired, \\n            msg.sender\\n        );\\n    }\\n\\n    function computedAddress(\\n        string calldata _name,\\n        address[] calldata _owners,\\n        uint256 _signaturesRequired,\\n        uint256 _walletIndex\\n    ) \\n        public \\n        view \\n        returns(address) \\n    {\\n        bytes32 _bytecodeHash = keccak256(\\n            abi.encodePacked(\\n                type(MultisigWallet).creationCode,\\n                abi.encode(_name, _owners, _signaturesRequired, address(this))\\n            )\\n        );\\n\\n        bytes32 _salt = keccak256(\\n            abi.encodePacked(abi.encode(_name, _walletIndex, address(msg.sender)))\\n        );\\n\\n        address computed_address = Create2.computeAddress(_salt, _bytecodeHash);\\n        return computed_address;\\n    }\\n\\n    function addOwnerToWallet(address newOwner, address wallet) external onlyWallet {\\n        if(usersWallets[newOwner][wallet]) revert MultisigFactory__AlreadyOwner();\\n        usersWallets[newOwner][wallet] = true;\\n    }\\n\\n    function removeOwnerFromWallet(address newOwner, address wallet) external onlyWallet {\\n        if(!usersWallets[newOwner][wallet]) revert MultisigFactory__NotOwner();\\n        usersWallets[newOwner][wallet] = false;\\n    }\\n\\n    //getters\\n    function numberOfWallets() public view returns(uint256) {\\n        return wallets.length;\\n    }\\n\\n    function getWallets() public view returns(MultisigWallet[] memory) {\\n        return wallets;\\n    }\\n\\n    function getWalletByIndex(uint256 _walletIndex) \\n        public \\n        view \\n        returns(\\n            address walletAddress,\\n            uint256 signaturesRequired,\\n            uint256 walletBalance\\n        ) \\n    {\\n        MultisigWallet wallet = wallets[_walletIndex];\\n        return(\\n            address(wallet),\\n            wallet.signaturesRequired(),\\n            address(wallet).balance\\n        );\\n    }\\n\\n    function isUserOwner(address user, address wallet) public view returns(bool) {\\n        return usersWallets[user][wallet];\\n    }\\n\\n}\",\"keccak256\":\"0xf3e7ec486690674fe06a19a6e72d0701558e1a5894a5b73524120fcb7f548be6\",\"license\":\"UNLICENSED\"},\"contracts/MultisigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./MultisigFactory.sol\\\";\\n\\nerror MultisigWallet__InvalidNumberOfSignaturesRequired();\\nerror MultisigWallet__DuplicateOwnerAddress();\\nerror MultisigWallet__InvalidAddress();\\nerror MultisigWallet__DuplicateOrUnorderedSignatures();\\nerror MultisigWallet__InsufficientSignatures();\\nerror MultisigWallet__TransactionFailed();\\nerror MultisigWallet__TransactionAlreadyExecuted();\\nerror MultisigWallet__NotOwner();\\nerror MultisigWallet__NotSelf();\\n\\ncontract MultisigWallet {\\n    using ECDSA for bytes32;\\n\\n    MultisigFactory private immutable factory;\\n    address[] private owners;\\n    string private walletName;\\n    uint256 public nonce;\\n    uint256 public signaturesRequired;\\n    uint256 public proposedTxIndex;\\n    // uint256 public numberOfOwners;\\n    mapping(address => bool) public isOwner;\\n    mapping(uint => bool) public txExecuted;\\n    \\n    event DepositReceived(address from, uint value, uint contractBalance);\\n    event TransactionProposed(\\n        address indexed proposedBy,\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        uint256 proposedTxIndex,\\n        bytes32 proposalHash\\n    );\\n    event TransactionExecuted(\\n        address indexed owner,\\n        address payable to,\\n        uint256 value,\\n        bytes data,\\n        uint256 nonce,\\n        bytes32 hash,\\n        bytes result\\n    );\\n    event OwnerAdded(\\n        address newOwner,\\n        uint256 signaturesRequired\\n    );\\n    event OwnerRemoved(\\n        address ownerRemoved,\\n        uint256 signaturesRequired\\n    );\\n\\n    modifier onlyOwner() {\\n        if(!isOwner[msg.sender]) revert MultisigWallet__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        if(msg.sender != address(this)) revert MultisigWallet__NotSelf();\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name, \\n        address[] memory _owners, \\n        uint _signaturesRequired,\\n        address _factoryAddress\\n    ) \\n        payable \\n    {\\n        if(_signaturesRequired == 0) revert MultisigWallet__InvalidNumberOfSignaturesRequired();\\n        if(_signaturesRequired > _owners.length) revert MultisigWallet__InvalidNumberOfSignaturesRequired();\\n        for(uint i; i < _owners.length; i++) {\\n            address owner = _owners[i];\\n            if(isOwner[owner]) revert MultisigWallet__DuplicateOwnerAddress();\\n            if(owner == address(0)) revert MultisigWallet__InvalidAddress();\\n            // numberOfOwners++;\\n            isOwner[owner] = true;\\n        }\\n        owners = _owners;\\n        signaturesRequired = _signaturesRequired;\\n        walletName = _name;\\n        factory = MultisigFactory(_factoryAddress);\\n    }\\n\\n    receive() external payable {\\n        emit DepositReceived(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    function addOwner(address newOwner, uint256 newSignaturesRequired) public onlySelf {\\n        if(newOwner == address(0)) revert MultisigWallet__InvalidAddress();\\n        if(isOwner[newOwner]) revert MultisigWallet__DuplicateOwnerAddress();\\n        isOwner[newOwner] = true;\\n        // numberOfOwners++;\\n        owners.push(newOwner);\\n        if(!validNumberOfSignatures(newSignaturesRequired)) revert MultisigWallet__InvalidNumberOfSignaturesRequired();\\n        signaturesRequired = newSignaturesRequired;\\n        factory.addOwnerToWallet(newOwner, address(this));\\n        emit OwnerAdded(newOwner, signaturesRequired);\\n    }\\n\\n    function removeOwner(address ownerToRemove, uint256 newSignaturesRequired) public onlySelf {\\n        if(!isOwner[ownerToRemove]) revert MultisigWallet__NotOwner();\\n        // isOwner[ownerToRemove] = false;\\n        // numberOfOwners--;\\n        _removeOwner(ownerToRemove);\\n        if(!validNumberOfSignatures(newSignaturesRequired)) revert MultisigWallet__InvalidNumberOfSignaturesRequired();\\n        signaturesRequired = newSignaturesRequired;\\n        factory.removeOwnerFromWallet(ownerToRemove, address(this));\\n        emit OwnerRemoved(ownerToRemove, signaturesRequired);\\n    }\\n\\n    function _removeOwner(address _ownerToRemove) private {\\n        isOwner[_ownerToRemove] = false;\\n        uint256 ownersLength = owners.length;\\n        address[] memory poppedOwners = new address[](owners.length);\\n        for (uint256 i = ownersLength - 1; i >= 0; ) {\\n            if (owners[i] != _ownerToRemove) {\\n                poppedOwners[i] = owners[i];\\n                owners.pop();\\n            } else {\\n                owners.pop();\\n                for (uint256 j = i; j < ownersLength - 1; ) {\\n                    owners.push(poppedOwners[j + 1]); \\n                    unchecked {\\n                        ++j;\\n                    }\\n                }\\n                return;\\n            }\\n            unchecked {\\n                --i;\\n            }\\n        }\\n    }\\n\\n    function proposeTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) public onlyOwner returns(bytes32) \\n    {\\n        proposedTxIndex++;\\n        bytes32 proposalHash = getTransactionHash(proposedTxIndex - 1, to, value, data);\\n        emit TransactionProposed(msg.sender, to, value, data, proposedTxIndex - 1, proposalHash);\\n        return proposalHash;\\n    } \\n\\n    function executeTransaction(\\n        uint256 txIndex,\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes[] calldata signatures\\n    ) \\n        public\\n        onlyOwner\\n        returns(bytes memory)\\n    {\\n        if(txExecuted[txIndex] == true) revert MultisigWallet__TransactionAlreadyExecuted();\\n        bytes32 _hash = getTransactionHash(txIndex, to, value, data);       \\n        nonce++;\\n        txExecuted[txIndex] = true; //test that this can't be abused here\\n\\n        uint256 validSignatures;\\n        address duplicateGuard;\\n        for(uint256 i; i < signatures.length; i++){\\n            address recovered = recover(_hash, signatures[i]);\\n            if(recovered <= duplicateGuard) {\\n                revert MultisigWallet__DuplicateOrUnorderedSignatures();\\n            }\\n            duplicateGuard = recovered;\\n            if(isOwner[recovered]) {\\n                validSignatures++;\\n            }\\n        }\\n        \\n        if(validSignatures < signaturesRequired) {\\n            revert MultisigWallet__InsufficientSignatures();\\n        }\\n\\n        (bool success, bytes memory result) = to.call{value: value}(data);\\n        if (!success) {\\n            revert MultisigWallet__TransactionFailed();\\n        }\\n\\n        emit TransactionExecuted(msg.sender, to, value, data, nonce - 1, _hash, result);\\n\\n        return result;\\n    }\\n\\n    function getTransactionHash(uint256 _proposedTxId, address to, uint256 value, bytes memory data) \\n        public view returns (bytes32) \\n    {\\n        return keccak256(abi.encodePacked(address(this), _proposedTxId, to, value, data));\\n    }\\n\\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\\n        return _hash.toEthSignedMessageHash().recover(_signature);\\n    }\\n\\n    function getName() public view returns(string memory) {\\n        return walletName;\\n    }\\n\\n    function validNumberOfSignatures(uint256 newSignaturesRequired) public view returns(bool valid) {\\n        if(newSignaturesRequired > 0 && newSignaturesRequired <= owners.length) return true;\\n    }\\n\\n    function getOwners() public view returns(address[] memory) {\\n        return owners;\\n    }\\n}\\n\",\"keccak256\":\"0x1dc5c4b0e153e97f25b5b9d8a68058b8e6a3b2a0e60f79a87bd9c9261ac414e0\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b87806100206000396000f3fe6080604052600436106200009e5760003560e01c80637272d6e011620000615780637272d6e014620001cd57806389c3c7b114620001fb578063a623f1ee1462000241578063b32830341462000285578063db7a460514620002a5576200009e565b80630f8ef5e714620000a357806312ef857414620000d15780632c03abe214620001015780636ee7c6d614620001455780636fd97d471462000189575b600080fd5b348015620000b057600080fd5b50620000cf6004803603810190620000c9919062000ede565b620002d5565b005b348015620000de57600080fd5b50620000e9620004b4565b604051620000f8919062000f40565b60405180910390f35b3480156200010e57600080fd5b506200012d600480360381019062000127919062000f5d565b620004c0565b6040516200013c919062000fac565b60405180910390f35b3480156200015257600080fd5b506200017160048036038101906200016b919062000ede565b620004e0565b60405162000180919062000fac565b60405180910390f35b3480156200019657600080fd5b50620001b56004803603810190620001af9190620010c7565b62000574565b604051620001c4919062001190565b60405180910390f35b348015620001da57600080fd5b50620001f96004803603810190620001f3919062000ede565b62000668565b005b3480156200020857600080fd5b50620002276004803603810190620002219190620011ad565b62000846565b6040516200023893929190620011df565b60405180910390f35b3480156200024e57600080fd5b506200026d600480360381019062000267919062000ede565b62000939565b6040516200027c919062000fac565b60405180910390f35b620002a360048036038101906200029d91906200121c565b62000968565b005b348015620002b257600080fd5b50620002bd62000c5a565b604051620002cc9190620013e8565b60405180910390f35b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662000359576040517f85e92e5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156200041b576040517fd6fa2b6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008080549050905090565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060405180602001620005899062000e61565b6020820181038252601f19601f82011660405250888888888830604051602001620005ba9695949392919062001545565b604051602081830303815290604052604051602001620005dc92919062001627565b6040516020818303038152906040528051906020012090506000888885336040516020016200060f94939291906200164f565b60405160208183030381529060405260405160200162000630919062001695565b604051602081830303815290604052805190602001209050600062000656828462000cea565b90508093505050509695505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620006ec576040517f85e92e5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620007ad576040517f6d22fff300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060008060008581548110620008635762000862620016ae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808173ffffffffffffffffffffffffffffffffffffffff1663ce757d296040518163ffffffff1660e01b815260040160206040518083038186803b158015620008d857600080fd5b505afa158015620008ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009139190620016f4565b8273ffffffffffffffffffffffffffffffffffffffff1631935093509350509193909250565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600062000974620004b4565b90506000868683336040516020016200099194939291906200164f565b604051602081830303815290604052604051602001620009b2919062001695565b604051602081830303815290604052805190602001209050600062000a4c348360405180602001620009e49062000e61565b6020820181038252601f19601f820116604052508b8b8b8b8b3060405160200162000a159695949392919062001545565b60405160208183030381529060405260405160200162000a3792919062001627565b60405160208183030381529060405262000d01565b905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b8787905081101562000bf3576001600260008a8a8581811062000b385762000b37620016ae565b5b905060200201602081019062000b4f919062000f5d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808062000bea9062001755565b91505062000b10565b508073ffffffffffffffffffffffffffffffffffffffff16847fe69e458feda0d10b54f837f1864dbf40a0996bc33b343a06c93571c0e0f7ca968b8b8b8b8b3360405162000c479695949392919062001545565b60405180910390a3505050505050505050565b6060600080548060200260200160405190810160405280929190818152602001828054801562000ce057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000c95575b5050505050905090565b600062000cf983833062000e1b565b905092915050565b6000808447101562000d4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d4190620017f3565b60405180910390fd5b60008351141562000d92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d899062001865565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000e10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e0790620018d7565b60405180910390fd5b809150509392505050565b60008060ff60f81b83868660405160200162000e3b9493929190620019c9565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b6131328062001a2083390190565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ea68262000e79565b9050919050565b62000eb88162000e99565b811462000ec457600080fd5b50565b60008135905062000ed88162000ead565b92915050565b6000806040838503121562000ef85762000ef762000e6f565b5b600062000f088582860162000ec7565b925050602062000f1b8582860162000ec7565b9150509250929050565b6000819050919050565b62000f3a8162000f25565b82525050565b600060208201905062000f57600083018462000f2f565b92915050565b60006020828403121562000f765762000f7562000e6f565b5b600062000f868482850162000ec7565b91505092915050565b60008115159050919050565b62000fa68162000f8f565b82525050565b600060208201905062000fc3600083018462000f9b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011262000ff15762000ff062000fc9565b5b8235905067ffffffffffffffff81111562001011576200101062000fce565b5b60208301915083600182028301111562001030576200102f62000fd3565b5b9250929050565b60008083601f84011262001050576200104f62000fc9565b5b8235905067ffffffffffffffff81111562001070576200106f62000fce565b5b6020830191508360208202830111156200108f576200108e62000fd3565b5b9250929050565b620010a18162000f25565b8114620010ad57600080fd5b50565b600081359050620010c18162001096565b92915050565b60008060008060008060808789031215620010e757620010e662000e6f565b5b600087013567ffffffffffffffff81111562001108576200110762000e74565b5b6200111689828a0162000fd8565b9650965050602087013567ffffffffffffffff8111156200113c576200113b62000e74565b5b6200114a89828a0162001037565b945094505060406200115f89828a01620010b0565b92505060606200117289828a01620010b0565b9150509295509295509295565b6200118a8162000e99565b82525050565b6000602082019050620011a760008301846200117f565b92915050565b600060208284031215620011c657620011c562000e6f565b5b6000620011d684828501620010b0565b91505092915050565b6000606082019050620011f660008301866200117f565b62001205602083018562000f2f565b62001214604083018462000f2f565b949350505050565b6000806000806000606086880312156200123b576200123a62000e6f565b5b600086013567ffffffffffffffff8111156200125c576200125b62000e74565b5b6200126a8882890162000fd8565b9550955050602086013567ffffffffffffffff81111562001290576200128f62000e74565b5b6200129e8882890162001037565b93509350506040620012b388828901620010b0565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600062001317620013116200130b8462000e79565b620012ec565b62000e79565b9050919050565b60006200132b82620012f6565b9050919050565b60006200133f826200131e565b9050919050565b620013518162001332565b82525050565b600062001365838362001346565b60208301905092915050565b6000602082019050919050565b60006200138b82620012c0565b620013978185620012cb565b9350620013a483620012dc565b8060005b83811015620013db578151620013bf888262001357565b9750620013cc8362001371565b925050600181019050620013a8565b5085935050505092915050565b600060208201905081810360008301526200140481846200137e565b905092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200144b83856200140c565b93506200145a8385846200141d565b62001465836200142c565b840190509392505050565b600082825260208201905092915050565b6000819050919050565b620014968162000e99565b82525050565b6000620014aa83836200148b565b60208301905092915050565b6000620014c7602084018462000ec7565b905092915050565b6000602082019050919050565b6000620014ea838562001470565b9350620014f78262001481565b8060005b858110156200153857620015108284620014b6565b6200151c88826200149c565b97506200152983620014cf565b925050600181019050620014fb565b5085925050509392505050565b600060808201905081810360008301526200156281888a6200143d565b9050818103602083015262001579818688620014dc565b90506200158a604083018562000f2f565b6200159960608301846200117f565b979650505050505050565b600081519050919050565b600081905092915050565b60005b83811015620015da578082015181840152602081019050620015bd565b83811115620015ea576000848401525b50505050565b6000620015fd82620015a4565b620016098185620015af565b93506200161b818560208601620015ba565b80840191505092915050565b6000620016358285620015f0565b9150620016438284620015f0565b91508190509392505050565b600060608201905081810360008301526200166c8186886200143d565b90506200167d602083018562000f2f565b6200168c60408301846200117f565b95945050505050565b6000620016a38284620015f0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050620016ee8162001096565b92915050565b6000602082840312156200170d576200170c62000e6f565b5b60006200171d84828501620016dd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620017628262000f25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001798576200179762001726565b5b600182019050919050565b7f437265617465323a20696e73756666696369656e742062616c616e6365000000600082015250565b6000620017db601d836200140c565b9150620017e882620017a3565b602082019050919050565b600060208201905081810360008301526200180e81620017cc565b9050919050565b7f437265617465323a2062797465636f6465206c656e677468206973207a65726f600082015250565b60006200184d6020836200140c565b91506200185a8262001815565b602082019050919050565b6000602082019050818103600083015262001880816200183e565b9050919050565b7f437265617465323a204661696c6564206f6e206465706c6f7900000000000000600082015250565b6000620018bf6019836200140c565b9150620018cc8262001887565b602082019050919050565b60006020820190508181036000830152620018f281620018b0565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b620019446200193e82620018f9565b62001925565b82525050565b60008160601b9050919050565b600062001964826200194a565b9050919050565b6000620019788262001957565b9050919050565b620019946200198e8262000e99565b6200196b565b82525050565b6000819050919050565b6000819050919050565b620019c3620019bd826200199a565b620019a4565b82525050565b6000620019d782876200192f565b600182019150620019e982866200197f565b601482019150620019fb8285620019ae565b60208201915062001a0d8284620019ae565b6020820191508190509594505050505056fe60a060405260405162003132380380620031328339818101604052810190620000299190620006fb565b600082141562000065576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8251821115620000a1576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156200022c576000848281518110620000c657620000c5620007ab565b5b60200260200101519050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161562000155576040517f60fc0b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001bd576040517f05b8aee500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550508080620002239062000809565b915050620000a4565b50826000908051906020019062000245929190620002a4565b508160038190555083600190805190602001906200026592919062000333565b508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050620008bc565b82805482825590600052602060002090810192821562000320579160200282015b828111156200031f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002c5565b5b5090506200032f9190620003c4565b5090565b828054620003419062000886565b90600052602060002090601f016020900481019282620003655760008555620003b1565b82601f106200038057805160ff1916838001178555620003b1565b82800160010185558215620003b1579182015b82811115620003b057825182559160200191906001019062000393565b5b509050620003c09190620003c4565b5090565b5b80821115620003df576000816000905550600101620003c5565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200044c8262000401565b810181811067ffffffffffffffff821117156200046e576200046d62000412565b5b80604052505050565b600062000483620003e3565b905062000491828262000441565b919050565b600067ffffffffffffffff821115620004b457620004b362000412565b5b620004bf8262000401565b9050602081019050919050565b60005b83811015620004ec578082015181840152602081019050620004cf565b83811115620004fc576000848401525b50505050565b600062000519620005138462000496565b62000477565b905082815260208101848484011115620005385762000537620003fc565b5b62000545848285620004cc565b509392505050565b600082601f830112620005655762000564620003f7565b5b81516200057784826020860162000502565b91505092915050565b600067ffffffffffffffff8211156200059e576200059d62000412565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005e182620005b4565b9050919050565b620005f381620005d4565b8114620005ff57600080fd5b50565b6000815190506200061381620005e8565b92915050565b6000620006306200062a8462000580565b62000477565b90508083825260208201905060208402830185811115620006565762000655620005af565b5b835b818110156200068357806200066e888262000602565b84526020840193505060208101905062000658565b5050509392505050565b600082601f830112620006a557620006a4620003f7565b5b8151620006b784826020860162000619565b91505092915050565b6000819050919050565b620006d581620006c0565b8114620006e157600080fd5b50565b600081519050620006f581620006ca565b92915050565b60008060008060808587031215620007185762000717620003ed565b5b600085015167ffffffffffffffff811115620007395762000738620003f2565b5b62000747878288016200054d565b945050602085015167ffffffffffffffff8111156200076b576200076a620003f2565b5b62000779878288016200068d565b93505060406200078c87828801620006e4565b92505060606200079f8782880162000602565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200081682620006c0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200084c576200084b620007da565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200089f57607f821691505b60208210811415620008b657620008b562000857565b5b50919050565b608051612853620008df600039600081816107260152610ff901526128536000f3fe6080604052600436106100e15760003560e01c80635e90852d1161007f578063a0e67e2b11610059578063a0e67e2b14610352578063affed0e01461037d578063bfd2b3a3146103a8578063ce757d29146103d157610123565b80635e90852d1461029b57806362969501146102d857806367e8786e1461031557610123565b80633cc38f5c116100bb5780633cc38f5c146101cd5780634c1d76f5146101f65780634fbb3f7c14610233578063545a4a3c1461025e57610123565b806317d7de7c1461012857806319045a25146101535780632f54bf6e1461019057610123565b36610123577f7aa1a8eb998c779420645fc14513bf058edb347d95c2fc2e6845bdc22f888631333447604051610119939291906117d4565b60405180910390a1005b600080fd5b34801561013457600080fd5b5061013d6103fc565b60405161014a91906118a4565b60405180910390f35b34801561015f57600080fd5b5061017a60048036038101906101759190611a45565b61048e565b6040516101879190611aa1565b60405180910390f35b34801561019c57600080fd5b506101b760048036038101906101b29190611ae8565b6104b3565b6040516101c49190611b30565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611b77565b6104d3565b005b34801561020257600080fd5b5061021d60048036038101906102189190611cab565b6107f0565b60405161022a9190611dbc565b60405180910390f35b34801561023f57600080fd5b50610248610c30565b6040516102559190611dde565b60405180910390f35b34801561026a57600080fd5b5061028560048036038101906102809190611df9565b610c36565b6040516102929190611e8b565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd9190611ea6565b610c71565b6040516102cf9190611e8b565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa9190611f1a565b610de2565b60405161030c9190611b30565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611f1a565b610e0c565b6040516103499190611b30565b60405180910390f35b34801561035e57600080fd5b50610367610e2c565b6040516103749190612005565b60405180910390f35b34801561038957600080fd5b50610392610eba565b60405161039f9190611dde565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190611b77565b610ec0565b005b3480156103dd57600080fd5b506103e66110c3565b6040516103f39190611dde565b60405180910390f35b60606001805461040b90612056565b80601f016020809104026020016040519081016040528092919081815260200182805461043790612056565b80156104845780601f1061045957610100808354040283529160200191610484565b820191906000526020600020905b81548152906001019060200180831161046757829003601f168201915b5050505050905090565b60006104ab8261049d856110c9565b6110f990919063ffffffff16565b905092915050565b60056020528060005260406000206000915054906101000a900460ff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610538576040517f3d496ee400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561059f576040517f05b8aee500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610623576040517f60fc0b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106e781610de2565b61071d576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630f8ef5e783306040518363ffffffff1660e01b815260040161077f929190612088565b600060405180830381600087803b15801561079957600080fd5b505af11580156107ad573d6000803e3d6000fd5b505050507f567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df826003546040516107e49291906120b1565b60405180910390a15050565b6060600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610875576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600660008a815260200190815260200160002060009054906101000a900460ff16151514156108d4576040517ffcedd73b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061092689898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c36565b90506002600081548092919061093b90612109565b91905055506001600660008b815260200190815260200160002060006101000a81548160ff02191690831515021790555060008060005b86869050811015610acf5760006109f08589898581811061099657610995612152565b5b90506020028101906109a89190612190565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061048e565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611610a57576040517f187d5c9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b809250600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610abb578380610ab790612109565b9450505b508080610ac790612109565b915050610972565b50600354821015610b0c576040517fc2bdf21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff168b8b8b604051610b37929190612223565b60006040518083038185875af1925050503d8060008114610b74576040519150601f19603f3d011682016040523d82523d6000602084013e610b79565b606091505b509150915081610bb5576040517f79628bde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ffe33488f51b772f27929645ec06a1345842a95fb7294fa0cc6e4af78654f2d0c8d8d8d8d6001600254610c00919061223c565b8b88604051610c1597969594939291906122ac565b60405180910390a28095505050505050979650505050505050565b60045481565b60003085858585604051602001610c519594939291906123b7565b604051602081830303815290604052805190602001209050949350505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cf6576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000815480929190610d0990612109565b91905055506000610d6e6001600454610d22919061223c565b878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c36565b90503373ffffffffffffffffffffffffffffffffffffffff167ff771c49ae51a3084dc67ba734f9e2bda4233246d2a1c300b158935aed986d816878787876001600454610dbb919061223c565b87604051610dce96959493929190612412565b60405180910390a280915050949350505050565b60008082118015610df857506000805490508211155b15610e065760019050610e07565b5b919050565b60066020528060005260406000206000915054906101000a900460ff1681565b60606000805480602002602001604051908101604052809291908181526020018280548015610eb057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e66575b5050505050905090565b60025481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f25576040517f3d496ee400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fa8576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fb182611120565b610fba81610de2565b610ff0576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637272d6e083306040518363ffffffff1660e01b8152600401611052929190612088565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505050507f769fbc2ec8c9a4bc66b4767cd66ac7ca0ca967982b7c375411e03d66bbfb64c2826003546040516110b79291906120b1565b60405180910390a15050565b60035481565b6000816040516020016110dc91906124e6565b604051602081830303815290604052805190602001209050919050565b60008060006111088585611446565b9150915061111581611498565b819250505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000808054905090506000808054905067ffffffffffffffff8111156111a1576111a061191a565b5b6040519080825280602002602001820160405280156111cf5781602001602082028036833780820191505090505b50905060006001836111e1919061223c565b90505b6000811061143f578373ffffffffffffffffffffffffffffffffffffffff166000828154811061121757611216612152565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611335576000818154811061127157611270612152565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106112af576112ae612152565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054806112fb576112fa61250c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611433565b60008054806113475761134661250c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008190505b60018461138f919061223c565b81101561142a576000836001836113a6919061253b565b815181106113b7576113b6612152565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001019050611382565b50505050611443565b806001900390506111e4565b5050505b50565b6000806041835114156114885760008060006020860151925060408601519150606086015160001a905061147c8782858561166d565b94509450505050611491565b60006002915091505b9250929050565b600060048111156114ac576114ab612591565b5b8160048111156114bf576114be612591565b5b14156114ca5761166a565b600160048111156114de576114dd612591565b5b8160048111156114f1576114f0612591565b5b1415611532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115299061260c565b60405180910390fd5b6002600481111561154657611545612591565b5b81600481111561155957611558612591565b5b141561159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159190612678565b60405180910390fd5b600360048111156115ae576115ad612591565b5b8160048111156115c1576115c0612591565b5b1415611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f99061270a565b60405180910390fd5b60048081111561161557611614612591565b5b81600481111561162857611627612591565b5b1415611669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116609061279c565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156116a8576000600391509150611771565b601b8560ff16141580156116c05750601c8560ff1614155b156116d2576000600491509150611771565b6000600187878787604051600081526020016040526040516116f794939291906127d8565b6020604051602081039080840390855afa158015611719573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561176857600060019250925050611771565b80600092509250505b94509492505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117a58261177a565b9050919050565b6117b58161179a565b82525050565b6000819050919050565b6117ce816117bb565b82525050565b60006060820190506117e960008301866117ac565b6117f660208301856117c5565b61180360408301846117c5565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561184557808201518184015260208101905061182a565b83811115611854576000848401525b50505050565b6000601f19601f8301169050919050565b60006118768261180b565b6118808185611816565b9350611890818560208601611827565b6118998161185a565b840191505092915050565b600060208201905081810360008301526118be818461186b565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6118ed816118da565b81146118f857600080fd5b50565b60008135905061190a816118e4565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119528261185a565b810181811067ffffffffffffffff821117156119715761197061191a565b5b80604052505050565b60006119846118c6565b90506119908282611949565b919050565b600067ffffffffffffffff8211156119b0576119af61191a565b5b6119b98261185a565b9050602081019050919050565b82818337600083830152505050565b60006119e86119e384611995565b61197a565b905082815260208101848484011115611a0457611a03611915565b5b611a0f8482856119c6565b509392505050565b600082601f830112611a2c57611a2b611910565b5b8135611a3c8482602086016119d5565b91505092915050565b60008060408385031215611a5c57611a5b6118d0565b5b6000611a6a858286016118fb565b925050602083013567ffffffffffffffff811115611a8b57611a8a6118d5565b5b611a9785828601611a17565b9150509250929050565b6000602082019050611ab660008301846117ac565b92915050565b611ac58161179a565b8114611ad057600080fd5b50565b600081359050611ae281611abc565b92915050565b600060208284031215611afe57611afd6118d0565b5b6000611b0c84828501611ad3565b91505092915050565b60008115159050919050565b611b2a81611b15565b82525050565b6000602082019050611b456000830184611b21565b92915050565b611b54816117bb565b8114611b5f57600080fd5b50565b600081359050611b7181611b4b565b92915050565b60008060408385031215611b8e57611b8d6118d0565b5b6000611b9c85828601611ad3565b9250506020611bad85828601611b62565b9150509250929050565b6000611bc28261177a565b9050919050565b611bd281611bb7565b8114611bdd57600080fd5b50565b600081359050611bef81611bc9565b92915050565b600080fd5b600080fd5b60008083601f840112611c1557611c14611910565b5b8235905067ffffffffffffffff811115611c3257611c31611bf5565b5b602083019150836001820283011115611c4e57611c4d611bfa565b5b9250929050565b60008083601f840112611c6b57611c6a611910565b5b8235905067ffffffffffffffff811115611c8857611c87611bf5565b5b602083019150836020820283011115611ca457611ca3611bfa565b5b9250929050565b600080600080600080600060a0888a031215611cca57611cc96118d0565b5b6000611cd88a828b01611b62565b9750506020611ce98a828b01611be0565b9650506040611cfa8a828b01611b62565b955050606088013567ffffffffffffffff811115611d1b57611d1a6118d5565b5b611d278a828b01611bff565b9450945050608088013567ffffffffffffffff811115611d4a57611d496118d5565b5b611d568a828b01611c55565b925092505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b6000611d8e82611d67565b611d988185611d72565b9350611da8818560208601611827565b611db18161185a565b840191505092915050565b60006020820190508181036000830152611dd68184611d83565b905092915050565b6000602082019050611df360008301846117c5565b92915050565b60008060008060808587031215611e1357611e126118d0565b5b6000611e2187828801611b62565b9450506020611e3287828801611ad3565b9350506040611e4387828801611b62565b925050606085013567ffffffffffffffff811115611e6457611e636118d5565b5b611e7087828801611a17565b91505092959194509250565b611e85816118da565b82525050565b6000602082019050611ea06000830184611e7c565b92915050565b60008060008060608587031215611ec057611ebf6118d0565b5b6000611ece87828801611ad3565b9450506020611edf87828801611b62565b935050604085013567ffffffffffffffff811115611f0057611eff6118d5565b5b611f0c87828801611bff565b925092505092959194509250565b600060208284031215611f3057611f2f6118d0565b5b6000611f3e84828501611b62565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f7c8161179a565b82525050565b6000611f8e8383611f73565b60208301905092915050565b6000602082019050919050565b6000611fb282611f47565b611fbc8185611f52565b9350611fc783611f63565b8060005b83811015611ff8578151611fdf8882611f82565b9750611fea83611f9a565b925050600181019050611fcb565b5085935050505092915050565b6000602082019050818103600083015261201f8184611fa7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061206e57607f821691505b6020821081141561208257612081612027565b5b50919050565b600060408201905061209d60008301856117ac565b6120aa60208301846117ac565b9392505050565b60006040820190506120c660008301856117ac565b6120d360208301846117c5565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612114826117bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612147576121466120da565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126121ad576121ac612181565b5b80840192508235915067ffffffffffffffff8211156121cf576121ce612186565b5b6020830192506001820236038313156121eb576121ea61218b565b5b509250929050565b600081905092915050565b600061220a83856121f3565b93506122178385846119c6565b82840190509392505050565b60006122308284866121fe565b91508190509392505050565b6000612247826117bb565b9150612252836117bb565b925082821015612265576122646120da565b5b828203905092915050565b61227981611bb7565b82525050565b600061228b8385611d72565b93506122988385846119c6565b6122a18361185a565b840190509392505050565b600060c0820190506122c1600083018a612270565b6122ce60208301896117c5565b81810360408301526122e181878961227f565b90506122f060608301866117c5565b6122fd6080830185611e7c565b81810360a083015261230f8184611d83565b905098975050505050505050565b60008160601b9050919050565b60006123358261231d565b9050919050565b60006123478261232a565b9050919050565b61235f61235a8261179a565b61233c565b82525050565b6000819050919050565b61238061237b826117bb565b612365565b82525050565b600061239182611d67565b61239b81856121f3565b93506123ab818560208601611827565b80840191505092915050565b60006123c3828861234e565b6014820191506123d3828761236f565b6020820191506123e3828661234e565b6014820191506123f3828561236f565b6020820191506124038284612386565b91508190509695505050505050565b600060a08201905061242760008301896117ac565b61243460208301886117c5565b818103604083015261244781868861227f565b905061245660608301856117c5565b6124636080830184611e7c565b979650505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006124af601c8361246e565b91506124ba82612479565b601c82019050919050565b6000819050919050565b6124e06124db826118da565b6124c5565b82525050565b60006124f1826124a2565b91506124fd82846124cf565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000612546826117bb565b9150612551836117bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612586576125856120da565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006125f6601883611816565b9150612601826125c0565b602082019050919050565b60006020820190508181036000830152612625816125e9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612662601f83611816565b915061266d8261262c565b602082019050919050565b6000602082019050818103600083015261269181612655565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006126f4602283611816565b91506126ff82612698565b604082019050919050565b60006020820190508181036000830152612723816126e7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612786602283611816565b91506127918261272a565b604082019050919050565b600060208201905081810360008301526127b581612779565b9050919050565b600060ff82169050919050565b6127d2816127bc565b82525050565b60006080820190506127ed6000830187611e7c565b6127fa60208301866127c9565b6128076040830185611e7c565b6128146060830184611e7c565b9594505050505056fea26469706673582212205c8054d5780d183de6649db4325eeca54ce2878958f98b3bde06a739aa2aaac164736f6c63430008090033a264697066735822122059877a72d7f07cbe8998ae66561a5095fdc3d0ccd71d03730d37049cfd3937c264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106200009e5760003560e01c80637272d6e011620000615780637272d6e014620001cd57806389c3c7b114620001fb578063a623f1ee1462000241578063b32830341462000285578063db7a460514620002a5576200009e565b80630f8ef5e714620000a357806312ef857414620000d15780632c03abe214620001015780636ee7c6d614620001455780636fd97d471462000189575b600080fd5b348015620000b057600080fd5b50620000cf6004803603810190620000c9919062000ede565b620002d5565b005b348015620000de57600080fd5b50620000e9620004b4565b604051620000f8919062000f40565b60405180910390f35b3480156200010e57600080fd5b506200012d600480360381019062000127919062000f5d565b620004c0565b6040516200013c919062000fac565b60405180910390f35b3480156200015257600080fd5b506200017160048036038101906200016b919062000ede565b620004e0565b60405162000180919062000fac565b60405180910390f35b3480156200019657600080fd5b50620001b56004803603810190620001af9190620010c7565b62000574565b604051620001c4919062001190565b60405180910390f35b348015620001da57600080fd5b50620001f96004803603810190620001f3919062000ede565b62000668565b005b3480156200020857600080fd5b50620002276004803603810190620002219190620011ad565b62000846565b6040516200023893929190620011df565b60405180910390f35b3480156200024e57600080fd5b506200026d600480360381019062000267919062000ede565b62000939565b6040516200027c919062000fac565b60405180910390f35b620002a360048036038101906200029d91906200121c565b62000968565b005b348015620002b257600080fd5b50620002bd62000c5a565b604051620002cc9190620013e8565b60405180910390f35b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662000359576040517f85e92e5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156200041b576040517fd6fa2b6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008080549050905090565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060405180602001620005899062000e61565b6020820181038252601f19601f82011660405250888888888830604051602001620005ba9695949392919062001545565b604051602081830303815290604052604051602001620005dc92919062001627565b6040516020818303038152906040528051906020012090506000888885336040516020016200060f94939291906200164f565b60405160208183030381529060405260405160200162000630919062001695565b604051602081830303815290604052805190602001209050600062000656828462000cea565b90508093505050509695505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620006ec576040517f85e92e5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620007ad576040517f6d22fff300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060008060008581548110620008635762000862620016ae565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808173ffffffffffffffffffffffffffffffffffffffff1663ce757d296040518163ffffffff1660e01b815260040160206040518083038186803b158015620008d857600080fd5b505afa158015620008ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009139190620016f4565b8273ffffffffffffffffffffffffffffffffffffffff1631935093509350509193909250565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600062000974620004b4565b90506000868683336040516020016200099194939291906200164f565b604051602081830303815290604052604051602001620009b2919062001695565b604051602081830303815290604052805190602001209050600062000a4c348360405180602001620009e49062000e61565b6020820181038252601f19601f820116604052508b8b8b8b8b3060405160200162000a159695949392919062001545565b60405160208183030381529060405260405160200162000a3792919062001627565b60405160208183030381529060405262000d01565b905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b8787905081101562000bf3576001600260008a8a8581811062000b385762000b37620016ae565b5b905060200201602081019062000b4f919062000f5d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808062000bea9062001755565b91505062000b10565b508073ffffffffffffffffffffffffffffffffffffffff16847fe69e458feda0d10b54f837f1864dbf40a0996bc33b343a06c93571c0e0f7ca968b8b8b8b8b3360405162000c479695949392919062001545565b60405180910390a3505050505050505050565b6060600080548060200260200160405190810160405280929190818152602001828054801562000ce057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000c95575b5050505050905090565b600062000cf983833062000e1b565b905092915050565b6000808447101562000d4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d4190620017f3565b60405180910390fd5b60008351141562000d92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d899062001865565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000e10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e0790620018d7565b60405180910390fd5b809150509392505050565b60008060ff60f81b83868660405160200162000e3b9493929190620019c9565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b6131328062001a2083390190565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ea68262000e79565b9050919050565b62000eb88162000e99565b811462000ec457600080fd5b50565b60008135905062000ed88162000ead565b92915050565b6000806040838503121562000ef85762000ef762000e6f565b5b600062000f088582860162000ec7565b925050602062000f1b8582860162000ec7565b9150509250929050565b6000819050919050565b62000f3a8162000f25565b82525050565b600060208201905062000f57600083018462000f2f565b92915050565b60006020828403121562000f765762000f7562000e6f565b5b600062000f868482850162000ec7565b91505092915050565b60008115159050919050565b62000fa68162000f8f565b82525050565b600060208201905062000fc3600083018462000f9b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011262000ff15762000ff062000fc9565b5b8235905067ffffffffffffffff81111562001011576200101062000fce565b5b60208301915083600182028301111562001030576200102f62000fd3565b5b9250929050565b60008083601f84011262001050576200104f62000fc9565b5b8235905067ffffffffffffffff81111562001070576200106f62000fce565b5b6020830191508360208202830111156200108f576200108e62000fd3565b5b9250929050565b620010a18162000f25565b8114620010ad57600080fd5b50565b600081359050620010c18162001096565b92915050565b60008060008060008060808789031215620010e757620010e662000e6f565b5b600087013567ffffffffffffffff81111562001108576200110762000e74565b5b6200111689828a0162000fd8565b9650965050602087013567ffffffffffffffff8111156200113c576200113b62000e74565b5b6200114a89828a0162001037565b945094505060406200115f89828a01620010b0565b92505060606200117289828a01620010b0565b9150509295509295509295565b6200118a8162000e99565b82525050565b6000602082019050620011a760008301846200117f565b92915050565b600060208284031215620011c657620011c562000e6f565b5b6000620011d684828501620010b0565b91505092915050565b6000606082019050620011f660008301866200117f565b62001205602083018562000f2f565b62001214604083018462000f2f565b949350505050565b6000806000806000606086880312156200123b576200123a62000e6f565b5b600086013567ffffffffffffffff8111156200125c576200125b62000e74565b5b6200126a8882890162000fd8565b9550955050602086013567ffffffffffffffff81111562001290576200128f62000e74565b5b6200129e8882890162001037565b93509350506040620012b388828901620010b0565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600062001317620013116200130b8462000e79565b620012ec565b62000e79565b9050919050565b60006200132b82620012f6565b9050919050565b60006200133f826200131e565b9050919050565b620013518162001332565b82525050565b600062001365838362001346565b60208301905092915050565b6000602082019050919050565b60006200138b82620012c0565b620013978185620012cb565b9350620013a483620012dc565b8060005b83811015620013db578151620013bf888262001357565b9750620013cc8362001371565b925050600181019050620013a8565b5085935050505092915050565b600060208201905081810360008301526200140481846200137e565b905092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200144b83856200140c565b93506200145a8385846200141d565b62001465836200142c565b840190509392505050565b600082825260208201905092915050565b6000819050919050565b620014968162000e99565b82525050565b6000620014aa83836200148b565b60208301905092915050565b6000620014c7602084018462000ec7565b905092915050565b6000602082019050919050565b6000620014ea838562001470565b9350620014f78262001481565b8060005b858110156200153857620015108284620014b6565b6200151c88826200149c565b97506200152983620014cf565b925050600181019050620014fb565b5085925050509392505050565b600060808201905081810360008301526200156281888a6200143d565b9050818103602083015262001579818688620014dc565b90506200158a604083018562000f2f565b6200159960608301846200117f565b979650505050505050565b600081519050919050565b600081905092915050565b60005b83811015620015da578082015181840152602081019050620015bd565b83811115620015ea576000848401525b50505050565b6000620015fd82620015a4565b620016098185620015af565b93506200161b818560208601620015ba565b80840191505092915050565b6000620016358285620015f0565b9150620016438284620015f0565b91508190509392505050565b600060608201905081810360008301526200166c8186886200143d565b90506200167d602083018562000f2f565b6200168c60408301846200117f565b95945050505050565b6000620016a38284620015f0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050620016ee8162001096565b92915050565b6000602082840312156200170d576200170c62000e6f565b5b60006200171d84828501620016dd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620017628262000f25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001798576200179762001726565b5b600182019050919050565b7f437265617465323a20696e73756666696369656e742062616c616e6365000000600082015250565b6000620017db601d836200140c565b9150620017e882620017a3565b602082019050919050565b600060208201905081810360008301526200180e81620017cc565b9050919050565b7f437265617465323a2062797465636f6465206c656e677468206973207a65726f600082015250565b60006200184d6020836200140c565b91506200185a8262001815565b602082019050919050565b6000602082019050818103600083015262001880816200183e565b9050919050565b7f437265617465323a204661696c6564206f6e206465706c6f7900000000000000600082015250565b6000620018bf6019836200140c565b9150620018cc8262001887565b602082019050919050565b60006020820190508181036000830152620018f281620018b0565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b620019446200193e82620018f9565b62001925565b82525050565b60008160601b9050919050565b600062001964826200194a565b9050919050565b6000620019788262001957565b9050919050565b620019946200198e8262000e99565b6200196b565b82525050565b6000819050919050565b6000819050919050565b620019c3620019bd826200199a565b620019a4565b82525050565b6000620019d782876200192f565b600182019150620019e982866200197f565b601482019150620019fb8285620019ae565b60208201915062001a0d8284620019ae565b6020820191508190509594505050505056fe60a060405260405162003132380380620031328339818101604052810190620000299190620006fb565b600082141562000065576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8251821115620000a1576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518110156200022c576000848281518110620000c657620000c5620007ab565b5b60200260200101519050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161562000155576040517f60fc0b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001bd576040517f05b8aee500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550508080620002239062000809565b915050620000a4565b50826000908051906020019062000245929190620002a4565b508160038190555083600190805190602001906200026592919062000333565b508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050620008bc565b82805482825590600052602060002090810192821562000320579160200282015b828111156200031f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002c5565b5b5090506200032f9190620003c4565b5090565b828054620003419062000886565b90600052602060002090601f016020900481019282620003655760008555620003b1565b82601f106200038057805160ff1916838001178555620003b1565b82800160010185558215620003b1579182015b82811115620003b057825182559160200191906001019062000393565b5b509050620003c09190620003c4565b5090565b5b80821115620003df576000816000905550600101620003c5565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200044c8262000401565b810181811067ffffffffffffffff821117156200046e576200046d62000412565b5b80604052505050565b600062000483620003e3565b905062000491828262000441565b919050565b600067ffffffffffffffff821115620004b457620004b362000412565b5b620004bf8262000401565b9050602081019050919050565b60005b83811015620004ec578082015181840152602081019050620004cf565b83811115620004fc576000848401525b50505050565b600062000519620005138462000496565b62000477565b905082815260208101848484011115620005385762000537620003fc565b5b62000545848285620004cc565b509392505050565b600082601f830112620005655762000564620003f7565b5b81516200057784826020860162000502565b91505092915050565b600067ffffffffffffffff8211156200059e576200059d62000412565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005e182620005b4565b9050919050565b620005f381620005d4565b8114620005ff57600080fd5b50565b6000815190506200061381620005e8565b92915050565b6000620006306200062a8462000580565b62000477565b90508083825260208201905060208402830185811115620006565762000655620005af565b5b835b818110156200068357806200066e888262000602565b84526020840193505060208101905062000658565b5050509392505050565b600082601f830112620006a557620006a4620003f7565b5b8151620006b784826020860162000619565b91505092915050565b6000819050919050565b620006d581620006c0565b8114620006e157600080fd5b50565b600081519050620006f581620006ca565b92915050565b60008060008060808587031215620007185762000717620003ed565b5b600085015167ffffffffffffffff811115620007395762000738620003f2565b5b62000747878288016200054d565b945050602085015167ffffffffffffffff8111156200076b576200076a620003f2565b5b62000779878288016200068d565b93505060406200078c87828801620006e4565b92505060606200079f8782880162000602565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200081682620006c0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200084c576200084b620007da565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200089f57607f821691505b60208210811415620008b657620008b562000857565b5b50919050565b608051612853620008df600039600081816107260152610ff901526128536000f3fe6080604052600436106100e15760003560e01c80635e90852d1161007f578063a0e67e2b11610059578063a0e67e2b14610352578063affed0e01461037d578063bfd2b3a3146103a8578063ce757d29146103d157610123565b80635e90852d1461029b57806362969501146102d857806367e8786e1461031557610123565b80633cc38f5c116100bb5780633cc38f5c146101cd5780634c1d76f5146101f65780634fbb3f7c14610233578063545a4a3c1461025e57610123565b806317d7de7c1461012857806319045a25146101535780632f54bf6e1461019057610123565b36610123577f7aa1a8eb998c779420645fc14513bf058edb347d95c2fc2e6845bdc22f888631333447604051610119939291906117d4565b60405180910390a1005b600080fd5b34801561013457600080fd5b5061013d6103fc565b60405161014a91906118a4565b60405180910390f35b34801561015f57600080fd5b5061017a60048036038101906101759190611a45565b61048e565b6040516101879190611aa1565b60405180910390f35b34801561019c57600080fd5b506101b760048036038101906101b29190611ae8565b6104b3565b6040516101c49190611b30565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611b77565b6104d3565b005b34801561020257600080fd5b5061021d60048036038101906102189190611cab565b6107f0565b60405161022a9190611dbc565b60405180910390f35b34801561023f57600080fd5b50610248610c30565b6040516102559190611dde565b60405180910390f35b34801561026a57600080fd5b5061028560048036038101906102809190611df9565b610c36565b6040516102929190611e8b565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd9190611ea6565b610c71565b6040516102cf9190611e8b565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa9190611f1a565b610de2565b60405161030c9190611b30565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611f1a565b610e0c565b6040516103499190611b30565b60405180910390f35b34801561035e57600080fd5b50610367610e2c565b6040516103749190612005565b60405180910390f35b34801561038957600080fd5b50610392610eba565b60405161039f9190611dde565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190611b77565b610ec0565b005b3480156103dd57600080fd5b506103e66110c3565b6040516103f39190611dde565b60405180910390f35b60606001805461040b90612056565b80601f016020809104026020016040519081016040528092919081815260200182805461043790612056565b80156104845780601f1061045957610100808354040283529160200191610484565b820191906000526020600020905b81548152906001019060200180831161046757829003601f168201915b5050505050905090565b60006104ab8261049d856110c9565b6110f990919063ffffffff16565b905092915050565b60056020528060005260406000206000915054906101000a900460ff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610538576040517f3d496ee400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561059f576040517f05b8aee500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610623576040517f60fc0b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106e781610de2565b61071d576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630f8ef5e783306040518363ffffffff1660e01b815260040161077f929190612088565b600060405180830381600087803b15801561079957600080fd5b505af11580156107ad573d6000803e3d6000fd5b505050507f567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df826003546040516107e49291906120b1565b60405180910390a15050565b6060600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610875576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600660008a815260200190815260200160002060009054906101000a900460ff16151514156108d4576040517ffcedd73b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061092689898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c36565b90506002600081548092919061093b90612109565b91905055506001600660008b815260200190815260200160002060006101000a81548160ff02191690831515021790555060008060005b86869050811015610acf5760006109f08589898581811061099657610995612152565b5b90506020028101906109a89190612190565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061048e565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611610a57576040517f187d5c9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b809250600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610abb578380610ab790612109565b9450505b508080610ac790612109565b915050610972565b50600354821015610b0c576040517fc2bdf21c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff168b8b8b604051610b37929190612223565b60006040518083038185875af1925050503d8060008114610b74576040519150601f19603f3d011682016040523d82523d6000602084013e610b79565b606091505b509150915081610bb5576040517f79628bde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ffe33488f51b772f27929645ec06a1345842a95fb7294fa0cc6e4af78654f2d0c8d8d8d8d6001600254610c00919061223c565b8b88604051610c1597969594939291906122ac565b60405180910390a28095505050505050979650505050505050565b60045481565b60003085858585604051602001610c519594939291906123b7565b604051602081830303815290604052805190602001209050949350505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cf6576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000815480929190610d0990612109565b91905055506000610d6e6001600454610d22919061223c565b878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c36565b90503373ffffffffffffffffffffffffffffffffffffffff167ff771c49ae51a3084dc67ba734f9e2bda4233246d2a1c300b158935aed986d816878787876001600454610dbb919061223c565b87604051610dce96959493929190612412565b60405180910390a280915050949350505050565b60008082118015610df857506000805490508211155b15610e065760019050610e07565b5b919050565b60066020528060005260406000206000915054906101000a900460ff1681565b60606000805480602002602001604051908101604052809291908181526020018280548015610eb057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e66575b5050505050905090565b60025481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f25576040517f3d496ee400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fa8576040517f3359218100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fb182611120565b610fba81610de2565b610ff0576040517f50f39d5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637272d6e083306040518363ffffffff1660e01b8152600401611052929190612088565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505050507f769fbc2ec8c9a4bc66b4767cd66ac7ca0ca967982b7c375411e03d66bbfb64c2826003546040516110b79291906120b1565b60405180910390a15050565b60035481565b6000816040516020016110dc91906124e6565b604051602081830303815290604052805190602001209050919050565b60008060006111088585611446565b9150915061111581611498565b819250505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000808054905090506000808054905067ffffffffffffffff8111156111a1576111a061191a565b5b6040519080825280602002602001820160405280156111cf5781602001602082028036833780820191505090505b50905060006001836111e1919061223c565b90505b6000811061143f578373ffffffffffffffffffffffffffffffffffffffff166000828154811061121757611216612152565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611335576000818154811061127157611270612152565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106112af576112ae612152565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054806112fb576112fa61250c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611433565b60008054806113475761134661250c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008190505b60018461138f919061223c565b81101561142a576000836001836113a6919061253b565b815181106113b7576113b6612152565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001019050611382565b50505050611443565b806001900390506111e4565b5050505b50565b6000806041835114156114885760008060006020860151925060408601519150606086015160001a905061147c8782858561166d565b94509450505050611491565b60006002915091505b9250929050565b600060048111156114ac576114ab612591565b5b8160048111156114bf576114be612591565b5b14156114ca5761166a565b600160048111156114de576114dd612591565b5b8160048111156114f1576114f0612591565b5b1415611532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115299061260c565b60405180910390fd5b6002600481111561154657611545612591565b5b81600481111561155957611558612591565b5b141561159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159190612678565b60405180910390fd5b600360048111156115ae576115ad612591565b5b8160048111156115c1576115c0612591565b5b1415611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f99061270a565b60405180910390fd5b60048081111561161557611614612591565b5b81600481111561162857611627612591565b5b1415611669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116609061279c565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156116a8576000600391509150611771565b601b8560ff16141580156116c05750601c8560ff1614155b156116d2576000600491509150611771565b6000600187878787604051600081526020016040526040516116f794939291906127d8565b6020604051602081039080840390855afa158015611719573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561176857600060019250925050611771565b80600092509250505b94509492505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117a58261177a565b9050919050565b6117b58161179a565b82525050565b6000819050919050565b6117ce816117bb565b82525050565b60006060820190506117e960008301866117ac565b6117f660208301856117c5565b61180360408301846117c5565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561184557808201518184015260208101905061182a565b83811115611854576000848401525b50505050565b6000601f19601f8301169050919050565b60006118768261180b565b6118808185611816565b9350611890818560208601611827565b6118998161185a565b840191505092915050565b600060208201905081810360008301526118be818461186b565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6118ed816118da565b81146118f857600080fd5b50565b60008135905061190a816118e4565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119528261185a565b810181811067ffffffffffffffff821117156119715761197061191a565b5b80604052505050565b60006119846118c6565b90506119908282611949565b919050565b600067ffffffffffffffff8211156119b0576119af61191a565b5b6119b98261185a565b9050602081019050919050565b82818337600083830152505050565b60006119e86119e384611995565b61197a565b905082815260208101848484011115611a0457611a03611915565b5b611a0f8482856119c6565b509392505050565b600082601f830112611a2c57611a2b611910565b5b8135611a3c8482602086016119d5565b91505092915050565b60008060408385031215611a5c57611a5b6118d0565b5b6000611a6a858286016118fb565b925050602083013567ffffffffffffffff811115611a8b57611a8a6118d5565b5b611a9785828601611a17565b9150509250929050565b6000602082019050611ab660008301846117ac565b92915050565b611ac58161179a565b8114611ad057600080fd5b50565b600081359050611ae281611abc565b92915050565b600060208284031215611afe57611afd6118d0565b5b6000611b0c84828501611ad3565b91505092915050565b60008115159050919050565b611b2a81611b15565b82525050565b6000602082019050611b456000830184611b21565b92915050565b611b54816117bb565b8114611b5f57600080fd5b50565b600081359050611b7181611b4b565b92915050565b60008060408385031215611b8e57611b8d6118d0565b5b6000611b9c85828601611ad3565b9250506020611bad85828601611b62565b9150509250929050565b6000611bc28261177a565b9050919050565b611bd281611bb7565b8114611bdd57600080fd5b50565b600081359050611bef81611bc9565b92915050565b600080fd5b600080fd5b60008083601f840112611c1557611c14611910565b5b8235905067ffffffffffffffff811115611c3257611c31611bf5565b5b602083019150836001820283011115611c4e57611c4d611bfa565b5b9250929050565b60008083601f840112611c6b57611c6a611910565b5b8235905067ffffffffffffffff811115611c8857611c87611bf5565b5b602083019150836020820283011115611ca457611ca3611bfa565b5b9250929050565b600080600080600080600060a0888a031215611cca57611cc96118d0565b5b6000611cd88a828b01611b62565b9750506020611ce98a828b01611be0565b9650506040611cfa8a828b01611b62565b955050606088013567ffffffffffffffff811115611d1b57611d1a6118d5565b5b611d278a828b01611bff565b9450945050608088013567ffffffffffffffff811115611d4a57611d496118d5565b5b611d568a828b01611c55565b925092505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b6000611d8e82611d67565b611d988185611d72565b9350611da8818560208601611827565b611db18161185a565b840191505092915050565b60006020820190508181036000830152611dd68184611d83565b905092915050565b6000602082019050611df360008301846117c5565b92915050565b60008060008060808587031215611e1357611e126118d0565b5b6000611e2187828801611b62565b9450506020611e3287828801611ad3565b9350506040611e4387828801611b62565b925050606085013567ffffffffffffffff811115611e6457611e636118d5565b5b611e7087828801611a17565b91505092959194509250565b611e85816118da565b82525050565b6000602082019050611ea06000830184611e7c565b92915050565b60008060008060608587031215611ec057611ebf6118d0565b5b6000611ece87828801611ad3565b9450506020611edf87828801611b62565b935050604085013567ffffffffffffffff811115611f0057611eff6118d5565b5b611f0c87828801611bff565b925092505092959194509250565b600060208284031215611f3057611f2f6118d0565b5b6000611f3e84828501611b62565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f7c8161179a565b82525050565b6000611f8e8383611f73565b60208301905092915050565b6000602082019050919050565b6000611fb282611f47565b611fbc8185611f52565b9350611fc783611f63565b8060005b83811015611ff8578151611fdf8882611f82565b9750611fea83611f9a565b925050600181019050611fcb565b5085935050505092915050565b6000602082019050818103600083015261201f8184611fa7565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061206e57607f821691505b6020821081141561208257612081612027565b5b50919050565b600060408201905061209d60008301856117ac565b6120aa60208301846117ac565b9392505050565b60006040820190506120c660008301856117ac565b6120d360208301846117c5565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612114826117bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612147576121466120da565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126121ad576121ac612181565b5b80840192508235915067ffffffffffffffff8211156121cf576121ce612186565b5b6020830192506001820236038313156121eb576121ea61218b565b5b509250929050565b600081905092915050565b600061220a83856121f3565b93506122178385846119c6565b82840190509392505050565b60006122308284866121fe565b91508190509392505050565b6000612247826117bb565b9150612252836117bb565b925082821015612265576122646120da565b5b828203905092915050565b61227981611bb7565b82525050565b600061228b8385611d72565b93506122988385846119c6565b6122a18361185a565b840190509392505050565b600060c0820190506122c1600083018a612270565b6122ce60208301896117c5565b81810360408301526122e181878961227f565b90506122f060608301866117c5565b6122fd6080830185611e7c565b81810360a083015261230f8184611d83565b905098975050505050505050565b60008160601b9050919050565b60006123358261231d565b9050919050565b60006123478261232a565b9050919050565b61235f61235a8261179a565b61233c565b82525050565b6000819050919050565b61238061237b826117bb565b612365565b82525050565b600061239182611d67565b61239b81856121f3565b93506123ab818560208601611827565b80840191505092915050565b60006123c3828861234e565b6014820191506123d3828761236f565b6020820191506123e3828661234e565b6014820191506123f3828561236f565b6020820191506124038284612386565b91508190509695505050505050565b600060a08201905061242760008301896117ac565b61243460208301886117c5565b818103604083015261244781868861227f565b905061245660608301856117c5565b6124636080830184611e7c565b979650505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006124af601c8361246e565b91506124ba82612479565b601c82019050919050565b6000819050919050565b6124e06124db826118da565b6124c5565b82525050565b60006124f1826124a2565b91506124fd82846124cf565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000612546826117bb565b9150612551836117bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612586576125856120da565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006125f6601883611816565b9150612601826125c0565b602082019050919050565b60006020820190508181036000830152612625816125e9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612662601f83611816565b915061266d8261262c565b602082019050919050565b6000602082019050818103600083015261269181612655565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006126f4602283611816565b91506126ff82612698565b604082019050919050565b60006020820190508181036000830152612723816126e7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612786602283611816565b91506127918261272a565b604082019050919050565b600060208201905081810360008301526127b581612779565b9050919050565b600060ff82169050919050565b6127d2816127bc565b82525050565b60006080820190506127ed6000830187611e7c565b6127fa60208301866127c9565b6128076040830185611e7c565b6128146060830184611e7c565b9594505050505056fea26469706673582212205c8054d5780d183de6649db4325eeca54ce2878958f98b3bde06a739aa2aaac164736f6c63430008090033a264697066735822122059877a72d7f07cbe8998ae66561a5095fdc3d0ccd71d03730d37049cfd3937c264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "contracts/MultisigFactory.sol:MultisigFactory",
        "label": "wallets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(MultisigWallet)1787)dyn_storage"
      },
      {
        "astId": 743,
        "contract": "contracts/MultisigFactory.sol:MultisigFactory",
        "label": "walletExists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 749,
        "contract": "contracts/MultisigFactory.sol:MultisigFactory",
        "label": "usersWallets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(MultisigWallet)1787)dyn_storage": {
        "base": "t_contract(MultisigWallet)1787",
        "encoding": "dynamic_array",
        "label": "contract MultisigWallet[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MultisigWallet)1787": {
        "encoding": "inplace",
        "label": "contract MultisigWallet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      }
    }
  }
}